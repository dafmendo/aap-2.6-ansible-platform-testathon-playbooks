---
- name: TC-USER-ORG-ASSOC-001 - Associate a user to organization via org-scoped role
  hosts: localhost
  gather_facts: false

  vars:
    rh_user: "{{ lookup('env','RH_USERNAME') | default(lookup('env','USER'), true) | default('tester', true) }}"
    suffix:  "{{ lookup('password', '/dev/null chars=ascii_lowercase length=5') }}"
    username: "USER-01-{{ rh_username }}"   # default; override if you already created one in TC-USER-001
    org_name: "ENG-ORG-{{ rh_username }}"
    org_role: "Organization Auditor"     # or Organization Admin / Organization Viewer

  module_defaults:
    group/ansible.platform.gateway:
      gateway_hostname: "{{ lookup('env','AAP_HOSTNAME') }}"
      gateway_username: "{{ lookup('env','AAP_USERNAME') }}"
      gateway_password: "{{ lookup('env','AAP_PASSWORD') }}"
      gateway_validate_certs: "{{ (lookup('env','AAP_VALIDATE_CERTS') | default('false')) | bool }}"
      gateway_request_timeout: 60

  tasks:
    # Pre-req checks per spec
    - name: Verify organization exists
      vars:
        found_orgs: >-
          {{ lookup('ansible.platform.gateway_api', 'organizations',
                    query_params={'name': org_name}) | default([], true) }}
      ansible.builtin.assert:
        that:
          - found_orgs | length == 1
        fail_msg: "Organization '{{ org_name }}' not found."

    - name: Verify user exists
      vars:
        found_users: >-
          {{ lookup('ansible.platform.gateway_api', 'users',
                    query_params={'username': username}) | default([], true) }}
      ansible.builtin.assert:
        that:
          - found_users | length == 1
        fail_msg: "User '{{ username }}' not found. Run 1487-3-5 first or set 'username' var."

    # Assign org-scoped role to associate user with org
    - name: Associate user to org via role assignment
      ansible.platform.role_user_assignment:
        role_definition: "{{ org_role }}"
        user: "{{ username }}"
        object_ids:
          - "{{ org_name }}"
        state: present
      register: org_assoc

    - name: Assert first run changed
      ansible.builtin.assert:
        that: org_assoc is changed

    # Idempotency
    - name: Re-run association (idempotent)
      ansible.platform.role_user_assignment:
        role_definition: "{{ org_role }}"
        user: "{{ username }}"
        object_ids:
          - "{{ org_name }}"
        state: present
      register: org_assoc_again

    - name: Assert second run not changed
      ansible.builtin.assert:
        that: org_assoc_again is not changed
